name: Build KSU LKM for FydeOS (ChromeOS 6.6)

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/build-kernel-fydeos-lkm.yml"
      - "kernel/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-kernel-fydeos-lkm.yml"
      - "kernel/**"

env:
  git_tag: chromeos-5.15  # FydeOS基于的内核分支
  ARCH: x86_64
  MODULE_NAME: kernelsu.ko  # 目标模块文件名

jobs:
  build-lkm:
    name: Build FydeOS LKM (x86_64)  # 直接使用固定值，避免环境变量
    runs-on: ubuntu-20.04
    env:
      KERNEL_DIR: ${{ github.workspace }}/kernel
      KSU_DIR: ${{ github.workspace }}/KernelSU
      OUTPUT_DIR: ${{ github.workspace }}/output

    steps:
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          # 基础编译工具
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release wget libncurses-dev \
            rsync python3 device-tree-compiler
          # 模块编译依赖
          sudo apt-get install -y llvm-14 clang-14
          # 符号处理工具
          pip install ast-grep-cli
          # 工具链软链接
          sudo ln -s --force /usr/bin/clang-14 /usr/bin/clang
          sudo ln -s --force /usr/bin/ld.lld-14 /usr/bin/ld.lld
          sudo ln -s --force /usr/bin/llvm-strip-14 /usr/bin/llvm-strip
          sudo ln -s --force python3 /usr/bin/python

      - name: Checkout KernelSU源码
        uses: actions/checkout@v4
        with:
          path: KernelSU
          ref: main
          fetch-depth: 0

      - name: 拉取FydeOS内核源码
        run: |
          git clone https://chromium.googlesource.com/chromiumos/third_party/kernel -b ${{ env.git_tag }}
          cd kernel
          # 提取内核版本信息
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "内核版本: $VERSION.$PATCHLEVEL.$SUBLEVEL"
          echo "kernel_version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV

      - name: 配置KernelSU为模块（LKM）
        working-directory: ${{ env.KERNEL_DIR }}
        run: |
          # 1. 链接KernelSU驱动到内核源码
          ln -sf ${{ env.KSU_DIR }}/kernel drivers/kernelsu

          # 2. 修改驱动Makefile和Kconfig
          DRIVER_MAKEFILE=drivers/Makefile
          DRIVER_KCONFIG=drivers/Kconfig
          # 确保Makefile包含KernelSU
          if ! grep -q "kernelsu" "$DRIVER_MAKEFILE"; then
            echo -e "\nobj-\$(CONFIG_KSU) += kernelsu/" >> "$DRIVER_MAKEFILE"
          fi
          # 确保Kconfig包含KernelSU
          if ! grep -q "kernelsu" "$DRIVER_KCONFIG"; then
            sed -i "/endmenu/i\\source \"drivers/kernelsu/Kconfig\"" "$DRIVER_KCONFIG"
          fi

          # 3. 修改Kconfig，将KernelSU设为模块（关键步骤）
          sed -i '/config KSU/,/help/ s/default y/default m/' drivers/kernelsu/Kconfig

          # 4. 处理模块符号检查
          if [ -f scripts/mod/modpost.c ]; then
            ast-grep -U -p '$$$ check_exports($$$) {$$$}' -r '' scripts/mod/modpost.c
            ast-grep -U -p 'check_exports($$$);' -r '' scripts/mod/modpost.c
          fi

      - name: 配置内核编译选项
        working-directory: ${{ env.KERNEL_DIR }}
        run: |
          # 加载默认配置
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          make LLVM=1 LLVM_IAS=1 O=${PWD} x86_64_defconfig < /dev/null

          # 启用模块支持
          scripts/config --file .config -e MODULES
          # 启用LTO
          scripts/config --file .config -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN
          # 禁用签名检查
          scripts/config --file .config -d MODULE_SIG -d MODULE_SIG_ALL

      - name: 编译KernelSU模块（ko文件）
        working-directory: ${{ env.KERNEL_DIR }}
        run: |
          # 编译模块
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) drivers/kernelsu/
          # 验证ko文件是否生成
          ls -l drivers/kernelsu/${{ env.MODULE_NAME }} || { echo "模块编译失败"; exit 1; }
          # 创建输出目录
          mkdir -p ${{ env.OUTPUT_DIR }}
          # 拷贝ko文件到输出目录，并添加版本信息
          cp drivers/kernelsu/${{ env.MODULE_NAME }} \
             ${{ env.OUTPUT_DIR }}/kernelsu-fydeos-${{ env.ARCH }}-${{ env.kernel_version }}.ko

      - name: 上传模块 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lkm-fydeos-${{ env.ARCH }}-${{ env.kernel_version }}
          path: ${{ env.OUTPUT_DIR }}/*.ko